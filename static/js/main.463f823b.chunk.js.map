{"version":3,"sources":["shared/services/AsyncActionHelper.ts","shared/components/Posts/reducer.ts","shared/components/Posts/index.tsx","containers/App/index.tsx","shared/constants/api.ts","shared/services/apiClientHelper.ts","shared/services/ApiClient.ts","shared/services/url.ts","shared/services/api.ts","shared/components/Posts/sagas.ts","store.ts","serviceWorker.ts","index.tsx"],"names":["AsyncAction","type","REQUEST","FAILURE","SUCCESS","Error","this","payload","containerId","fetchPosts","fetchPost","createPost","updatePost","removePost","selector","state","produce","draft","isFetchPostsLoading","fetchPostsError","postsData","isFetchPostLoading","fetchPostError","postData","isCreatePostLoading","createPostError","isUpdatePostLoading","updatePostError","isRemovePostLoading","removePostError","Posts","dispatch","useDispatch","useSelector","console","log","useEffect","request","values","postId","map","post","title","id","memo","App","BASE_URL","process","REACT_APP_AUTH_URL","ROOT_ENDPOINTS","posts","isJsonContentType","indexOf","url","body","options","a","method","headers","Headers","Authorization","FormData","delete","isString","JSON","stringify","extraOptions","header","additionalHeaders","restOptions","hasOwnProperty","append","fetch","toString","then","response","Promise","resolve","reject","get","json","text","data","status","Url","params","Object","assign","paramsStr","transform","result","value","key","push","join","ApiClient","put","fetchPostsSaga","fetchPostSaga","createPostSaga","updatePostSaga","removePostSaga","postsSagas","call","api","res","success","failure","setErrorMessage","callback","all","takeLatest","rootReducer","combineReducers","postsId","postsReducer","sagas","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","forEach","saga","run","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.463f823b.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport default class AsyncAction {\n  REQUEST: string;\n\n  FAILURE: string;\n\n  SUCCESS: string;\n\n  constructor(type?: string) {\n    if (!type) {\n      throw new Error(\"Type parameter is mandatory\");\n    }\n    this.REQUEST = `${type}_REQUEST`;\n    this.SUCCESS = `${type}_SUCCESS`;\n    this.FAILURE = `${type}_FAILURE`;\n  }\n\n  request(payload?: any) {\n    if (payload) return { type: this.REQUEST, payload };\n    return { type: this.REQUEST };\n  }\n\n  success(payload?: any) {\n    if (payload) return { type: this.SUCCESS, payload };\n    return { type: this.SUCCESS };\n  }\n\n  failure(payload?: any) {\n    if (payload) return { type: this.FAILURE, payload };\n    return { type: this.FAILURE };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport produce from \"immer\";\n\nimport AsyncAction from \"../../services/AsyncActionHelper\";\n\nexport const containerId = \"PostsPage\";\nexport const fetchPosts = new AsyncAction(`${containerId}/POSTS_FETCH`);\nexport const fetchPost = new AsyncAction(`${containerId}/POST_FETCH`);\nexport const createPost = new AsyncAction(`${containerId}/POST_CREATE`);\nexport const updatePost = new AsyncAction(`${containerId}/POST_UPDATE`);\nexport const removePost = new AsyncAction(`${containerId}/POST_REMOVE`);\n\nexport const selector = (state: { [k: string]: any }) => state[containerId];\n\nexport const initialState: any = {\n  postsData: [],\n  postData: {},\n\n  isFetchPostsLoading: false,\n  isFetchPostLoading: false,\n  isCreatePostLoading: false,\n  isUpdatePostLoading: false,\n  isRemovePostLoading: false,\n\n  fetchPostsError: \"\",\n  fetchPostError: \"\",\n  createPostError: \"\",\n  updatePostError: \"\",\n  removePostError: \"\",\n};\n\nexport default produce((draft, { type, payload }) => {\n  switch (type) {\n    case fetchPosts.REQUEST:\n      draft.isFetchPostsLoading = true;\n      draft.fetchPostsError = \"\";\n      break;\n    case fetchPosts.SUCCESS:\n      draft.postsData = payload;\n      draft.isFetchPostsLoading = false;\n      break;\n    case fetchPosts.FAILURE:\n      draft.isFetchPostsLoading = false;\n      draft.fetchPostsError = payload;\n      break;\n\n    case fetchPost.REQUEST:\n      draft.isFetchPostLoading = true;\n      draft.fetchPostError = \"\";\n      break;\n    case fetchPost.SUCCESS:\n      draft.postData = payload;\n      draft.isFetchPostLoading = false;\n      break;\n    case fetchPost.FAILURE:\n      draft.isFetchPostLoading = false;\n      draft.fetchPostError = payload;\n      break;\n\n    case createPost.REQUEST:\n      draft.isCreatePostLoading = true;\n      draft.createPostError = \"\";\n      break;\n    case createPost.SUCCESS:\n      draft.isCreatePostLoading = false;\n      break;\n    case createPost.FAILURE:\n      draft.isCreatePostLoading = false;\n      draft.createPostError = payload;\n      break;\n\n    case updatePost.REQUEST:\n      draft.isUpdatePostLoading = true;\n      draft.updatePostError = \"\";\n      break;\n    case updatePost.SUCCESS:\n      draft.postData = payload;\n      draft.isUpdatePostLoading = false;\n      break;\n    case updatePost.FAILURE:\n      draft.isUpdatePostLoading = false;\n      draft.updatePostError = payload;\n      break;\n\n    case removePost.REQUEST:\n      draft.isRemovePostLoading = true;\n      draft.removePostError = \"\";\n      break;\n    case removePost.SUCCESS:\n      draft.isRemovePostLoading = false;\n      break;\n    case removePost.FAILURE:\n      draft.isRemovePostLoading = false;\n      draft.removePostError = payload;\n      break;\n\n    default:\n  }\n}, initialState);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { memo, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  fetchPosts,\n  fetchPost,\n  // updatePost,\n  // createPost,\n  // removePost,\n  selector,\n} from \"./reducer\";\n\nconst postId = 1;\n\nexport const Posts = () => {\n  const dispatch = useDispatch();\n\n  const {\n    postsData,\n    isFetchPostsLoading,\n    postData,\n    isFetchPostLoading,\n    // isCreatePostLoading,\n    // isUpdatePostLoading,\n    // isRemovePostLoading,\n  } = useSelector(selector);\n  console.log(isFetchPostLoading, postData);\n\n  useEffect(() => {\n    dispatch(fetchPosts.request());\n    dispatch(fetchPost.request({ values: { postId } }));\n  }, [dispatch]);\n\n  return (\n    <>\n      <header>Posts</header>\n      {isFetchPostsLoading\n        ? \"Loading\"\n        : postsData.map((post: any) => <h6 key={post.id}>{post.title}</h6>)}\n    </>\n  );\n};\n\nexport default memo(Posts);\n","import Posts from \"../../shared/components/Posts\";\nimport \"./styles.css\";\n\nexport const App = () => {\n  return (\n    <div>\n      <Posts />\n    </div>\n  );\n};\n\nexport default App;\n","export const BASE_URL =\n  process.env.REACT_APP_AUTH_URL || \"https://jsonplaceholder.typicode.com\";\n\nexport const ROOT_ENDPOINTS = {\n  posts: `${BASE_URL}/posts`,\n};\n","export const isJsonContentType = (type: string | string[] | null) =>\n  type && type.indexOf(\"json\") >= 0;\n\nexport const getHeaders = () => {\n  // modify this in accordance to how token is retrieved\n  const token = \"123\";\n\n  return new Headers({\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`,\n  });\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable class-methods-use-this */\nimport isString from \"lodash/isString\";\n\nimport { isJsonContentType, getHeaders } from \"./apiClientHelper\";\nimport { Url } from \"./url\";\n\nclass ApiClient {\n  async get(url: Url | string, body?: any, options?: any) {\n    return this.request(\"GET\", url, body, options);\n  }\n\n  async post(url: Url | string, body?: any, options?: any) {\n    return this.request(\"POST\", url, body, options);\n  }\n\n  async put(url: Url | string, body?: any, options?: any) {\n    return this.request(\"PUT\", url, body, options);\n  }\n\n  async delete(url: Url | string, body?: any, options?: any) {\n    return this.request(\"DELETE\", url, body, options);\n  }\n\n  async patch(url: Url | string, body?: any, options?: any) {\n    return this.request(\"PATCH\", url, body, options);\n  }\n\n  async request(method: string, url: Url | string, body?: any, options?: any) {\n    const headers = getHeaders();\n\n    if (body) {\n      if (body instanceof FormData) {\n        headers.delete(\"Content-Type\");\n      } else if (!isString(body)) {\n        body = JSON.stringify(body);\n      }\n    }\n\n    let extraOptions = {};\n\n    if (options) {\n      const { headers: additionalHeaders, ...restOptions } = options;\n      extraOptions = restOptions;\n      for (const header in additionalHeaders) {\n        if (additionalHeaders.hasOwnProperty(header)) {\n          headers.append(header, additionalHeaders(header));\n        }\n      }\n    }\n\n    return fetch(url.toString(), {\n      body,\n      method,\n      headers,\n      ...extraOptions,\n    }).then(\n      response =>\n        new Promise((resolve, reject) => {\n          const type = response.headers.get(\"content-type\");\n\n          let promise;\n          if (isJsonContentType(type)) {\n            promise = response.json();\n          } else {\n            promise = response.text();\n          }\n\n          promise.then(data => {\n            if (response.status < 400) {\n              resolve(data);\n            } else {\n              reject(data);\n            }\n          });\n        }),\n    );\n  }\n}\n\nexport default new ApiClient();\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport transform from \"lodash/transform\";\n\nimport { getUrlWithQueryTypes } from \"./types\";\n\nexport class Url {\n  url: string;\n\n  params: any;\n\n  constructor(url = \"\", params?: any) {\n    this.url = url;\n    this.params = params;\n  }\n\n  addParams(params: any) {\n    Object.assign(this.params, params);\n  }\n\n  toString() {\n    let paramsStr = this.params ? \"?\" : \"\";\n\n    paramsStr += transform(\n      this.params,\n      (result: any, value: any, key: any) => {\n        result.push(`${key}=${value}`);\n      },\n      [],\n    ).join(\"&\");\n\n    return this.url + paramsStr;\n  }\n}\n\nexport const getUrlWithQuery = ({\n  location,\n  queryName,\n  queryValue,\n}: getUrlWithQueryTypes) => {\n  const { pathname, search } = location;\n  const params = new URLSearchParams(search.slice(1));\n\n  if (params.has(queryName)) {\n    params.set(queryName, queryValue);\n  } else {\n    params.append(queryName, queryValue);\n  }\n\n  return `${pathname}?${decodeURIComponent(params.toString())}`;\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ROOT_ENDPOINTS } from \"../constants/api\";\n\nimport ApiClient from \"./ApiClient\";\nimport { Url } from \"./url\";\n\nexport const posts = {\n  getAll: () => ApiClient.get(new Url(`${ROOT_ENDPOINTS.posts}`)),\n  get: (postId: any) =>\n    ApiClient.get(new Url(`${ROOT_ENDPOINTS.posts}/${postId}`)),\n  post: (data: any) => ApiClient.post(new Url(`${ROOT_ENDPOINTS.posts}`), data),\n  put: (postId: any, data: any) =>\n    ApiClient.put(new Url(`${ROOT_ENDPOINTS.posts}/${postId}`), data),\n  delete: (postId: any) =>\n    ApiClient.get(new Url(`${ROOT_ENDPOINTS.posts}/${postId}`)),\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\n\nimport * as api from \"../../services/api\";\nimport {\n  createPost,\n  fetchPost,\n  fetchPosts,\n  removePost,\n  updatePost,\n} from \"./reducer\";\n\nexport function* fetchPostsSaga(): any {\n  try {\n    const res = yield call(api.posts.getAll);\n\n    yield put(fetchPosts.success(res));\n  } catch (err) {\n    yield put(fetchPosts.failure(err));\n  }\n}\n\nexport function* fetchPostSaga({ payload }: any): any {\n  const { values } = payload;\n  const { postId } = values;\n\n  try {\n    const res = yield call(api.posts.get, postId);\n\n    yield put(fetchPost.success(res));\n  } catch (err) {\n    yield put(fetchPost.failure(err));\n  }\n}\n\nexport function* createPostSaga({ payload }: any): any {\n  const { values, setErrorMessage } = payload;\n\n  try {\n    yield call(api.posts.post, values);\n\n    yield put(createPost.success());\n    yield put(fetchPosts.request());\n  } catch (err) {\n    yield put(createPost.failure(err));\n    yield call(setErrorMessage, \"postname\", \"postname needs to be unique\");\n  }\n}\n\nexport function* updatePostSaga({ payload }: any): any {\n  const { values, setErrorMessage } = payload;\n  const { postId } = values;\n\n  try {\n    const res = yield call(api.posts.put, postId, values);\n\n    yield put(updatePost.success(res));\n    yield put(fetchPosts.request());\n  } catch (err) {\n    yield put(updatePost.failure(err));\n\n    yield call(setErrorMessage, \"postname\", \"postname needs to be unique\");\n  }\n}\n\nexport function* removePostSaga({ payload }: any): any {\n  const { values, callback } = payload;\n  const { postId } = values;\n\n  try {\n    yield call(api.posts.delete, postId);\n\n    yield put(removePost.success());\n    yield put(fetchPosts.request());\n\n    callback();\n  } catch (err) {\n    yield put(removePost.failure(err));\n  }\n}\n\nexport default function* postsSagas() {\n  yield all([\n    takeLatest(fetchPosts.REQUEST, fetchPostsSaga),\n    takeLatest(fetchPost.REQUEST, fetchPostSaga),\n    takeLatest(createPost.REQUEST, createPostSaga),\n    takeLatest(updatePost.REQUEST, updatePostSaga),\n    takeLatest(removePost.REQUEST, removePostSaga),\n  ]);\n}\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport postsReducer, {\n  containerId as postsId,\n} from \"./shared/components/Posts/reducer\";\nimport postsSagas from \"./shared/components/Posts/sagas\";\n\nconst rootReducer = combineReducers({\n  [postsId]: postsReducer,\n});\n\nconst sagas = [postsSagas];\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers =\n  (process.env.NODE_ENV !== \"production\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware)),\n);\n\nsagas.forEach(saga => sagaMiddleware.run(saga));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App\";\nimport store from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}